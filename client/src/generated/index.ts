// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ProcessPhysicsTick } from "./process_physics_tick_reducer.ts";
export { ProcessPhysicsTick };
import { Spawn } from "./spawn_reducer.ts";
export { Spawn };
import { SpawnExplodingSpheres } from "./spawn_exploding_spheres_reducer.ts";
export { SpawnExplodingSpheres };

// Import and reexport all table handle types
import { EntityTableHandle } from "./entity_table.ts";
export { EntityTableHandle };
import { EntityPhysicsTableHandle } from "./entity_physics_table.ts";
export { EntityPhysicsTableHandle };
import { EntityTransformTableHandle } from "./entity_transform_table.ts";
export { EntityTransformTableHandle };
import { PhysicsTickTimerTableHandle } from "./physics_tick_timer_table.ts";
export { PhysicsTickTimerTableHandle };

// Import and reexport all types
import { Entity } from "./entity_type.ts";
export { Entity };
import { EntityPhysics } from "./entity_physics_type.ts";
export { EntityPhysics };
import { EntityTransform } from "./entity_transform_type.ts";
export { EntityTransform };
import { PhysicsTickTimer } from "./physics_tick_timer_type.ts";
export { PhysicsTickTimer };

const REMOTE_MODULE = {
  tables: {
    entity: {
      tableName: "entity",
      rowType: Entity.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    entity_physics: {
      tableName: "entity_physics",
      rowType: EntityPhysics.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    entity_transform: {
      tableName: "entity_transform",
      rowType: EntityTransform.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    physics_tick_timer: {
      tableName: "physics_tick_timer",
      rowType: PhysicsTickTimer.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    process_physics_tick: {
      reducerName: "process_physics_tick",
      argsType: ProcessPhysicsTick.getTypeScriptAlgebraicType(),
    },
    spawn: {
      reducerName: "spawn",
      argsType: Spawn.getTypeScriptAlgebraicType(),
    },
    spawn_exploding_spheres: {
      reducerName: "spawn_exploding_spheres",
      argsType: SpawnExplodingSpheres.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ProcessPhysicsTick", args: ProcessPhysicsTick }
| { name: "Spawn", args: Spawn }
| { name: "SpawnExplodingSpheres", args: SpawnExplodingSpheres }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  processPhysicsTick(timer: PhysicsTickTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    ProcessPhysicsTick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("process_physics_tick", __argsBuffer, this.setCallReducerFlags.processPhysicsTickFlags);
  }

  onProcessPhysicsTick(callback: (ctx: ReducerEventContext, timer: PhysicsTickTimer) => void) {
    this.connection.onReducer("process_physics_tick", callback);
  }

  removeOnProcessPhysicsTick(callback: (ctx: ReducerEventContext, timer: PhysicsTickTimer) => void) {
    this.connection.offReducer("process_physics_tick", callback);
  }

  spawn(x: number, y: number, z: number) {
    const __args = { x, y, z };
    let __writer = new BinaryWriter(1024);
    Spawn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn", __argsBuffer, this.setCallReducerFlags.spawnFlags);
  }

  onSpawn(callback: (ctx: ReducerEventContext, x: number, y: number, z: number) => void) {
    this.connection.onReducer("spawn", callback);
  }

  removeOnSpawn(callback: (ctx: ReducerEventContext, x: number, y: number, z: number) => void) {
    this.connection.offReducer("spawn", callback);
  }

  spawnExplodingSpheres() {
    this.connection.callReducer("spawn_exploding_spheres", new Uint8Array(0), this.setCallReducerFlags.spawnExplodingSpheresFlags);
  }

  onSpawnExplodingSpheres(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("spawn_exploding_spheres", callback);
  }

  removeOnSpawnExplodingSpheres(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("spawn_exploding_spheres", callback);
  }

}

export class SetReducerFlags {
  processPhysicsTickFlags: CallReducerFlags = 'FullUpdate';
  processPhysicsTick(flags: CallReducerFlags) {
    this.processPhysicsTickFlags = flags;
  }

  spawnFlags: CallReducerFlags = 'FullUpdate';
  spawn(flags: CallReducerFlags) {
    this.spawnFlags = flags;
  }

  spawnExplodingSpheresFlags: CallReducerFlags = 'FullUpdate';
  spawnExplodingSpheres(flags: CallReducerFlags) {
    this.spawnExplodingSpheresFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get entity(): EntityTableHandle {
    return new EntityTableHandle(this.connection.clientCache.getOrCreateTable<Entity>(REMOTE_MODULE.tables.entity));
  }

  get entityPhysics(): EntityPhysicsTableHandle {
    return new EntityPhysicsTableHandle(this.connection.clientCache.getOrCreateTable<EntityPhysics>(REMOTE_MODULE.tables.entity_physics));
  }

  get entityTransform(): EntityTransformTableHandle {
    return new EntityTransformTableHandle(this.connection.clientCache.getOrCreateTable<EntityTransform>(REMOTE_MODULE.tables.entity_transform));
  }

  get physicsTickTimer(): PhysicsTickTimerTableHandle {
    return new PhysicsTickTimerTableHandle(this.connection.clientCache.getOrCreateTable<PhysicsTickTimer>(REMOTE_MODULE.tables.physics_tick_timer));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
