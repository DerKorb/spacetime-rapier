[2025-04-27T21:15:47.900000+00:00] sinfulspartan#0: I was also going to say you can use Rapier physics in Godot and Rust server. You can also build a physics simulation server in Godot that handles the physics for the server as an Auth Client. This will have a performance hit but allows the sharing of physics shapes your client uses that you can edit in the Godot editor.
[2025-04-27T19:56:49.491000+00:00] dovos#0: also you wouldn't actually send over the collision shapes or physics world. you would only send over the tranformation data and maybe forces/velocity
[2025-04-27T19:55:44.980000+00:00] dovos#0: there is a addon for godot rapier. it is just a replacement of the physics engine in the settings. like changing to jolt
[2025-04-27T19:29:32.643000+00:00] gromnax#0: I wonder how hard it's going to be to fully integrate Godot with this. Doesn't one need to compile the physics server 3D into the database for it to work? If not, wouldn't the physics be client-authorithative and thus prone to cheats?
[2025-04-27T01:58:15.260000+00:00] dovos#0: we have AElith. we don't need SC. we will have a einstain physics based space game in the future
[2025-04-25T16:26:24.912000+00:00] dovos#0: the server might hold the collisionshapes to do the physics but it doesn't send them to the client
[2025-04-25T16:15:41.302000+00:00] dovos#0: with einstain physics...
[2025-04-25T16:15:32.725000+00:00] dovos#0: the physics are already made
[2025-04-25T16:08:17.062000+00:00] chaserlewis#0: I think I might be speaking to generally. I just mean ready made serverside physics & nav solutions don't exist currently. You can make everything server authoritative easily. Just if you need physics or nav you gotta roll your own solution for now.
[2025-04-25T16:07:30.449000+00:00] dovos#0: btw did you simulate the solar system with the known values? it would be a good test for the physics accuracy
[2025-04-25T16:03:12.482000+00:00] dovos#0: <#1358862705938796746>  tries to solve the physics on the server
[2025-04-25T16:03:01.854000+00:00] chaserlewis#0: like Blave said Bitcraft is an MMO they designed around spacetimedb and they are completely server authoritative. They did have to write some of their own navigation & physics stuff.
[2025-04-25T16:01:05.095000+00:00] tyanaaeos#0: We patented our physics simulation system, with the exception that it is free use for academic purposes.
[2025-04-25T16:00:42.204000+00:00] .dexcel#0: I don't think most mmos rely on physics to begin with ...?
[2025-04-25T15:59:45.998000+00:00] chaserlewis#0: Also if your game doesn't need a lot of authoritative physics it's ready made for that.
[2025-04-25T15:57:48.841000+00:00] tyanaaeos#0: The physics system is done though.
[2025-04-25T15:50:15.138000+00:00] chaserlewis#0: Yeah spacetimedb makes somethings way easier. Lots of small games you wouldn't bother to make since all the server infrastructure would be such a pain are now pretty trivial.  It has some pain points for some game types but community is looking for solutions. I think when there is a ready made server side physics solution most game types will be a lot more practical.
[2025-04-25T15:48:03.607000+00:00] tyanaaeos#0: All physics calculations are 1:1
[2025-04-25T15:47:32.978000+00:00] dovos#0: i assume you use keplers physics laws?
[2025-04-25T15:46:16.197000+00:00] tyanaaeos#0: I run two physics models.  One for the galaxy's stars,.relative to each other, and each star system runs another for everything that gets carried along with the star.
[2025-04-25T15:40:17.280000+00:00] tyanaaeos#0: I'd be happy to.  It's called Starspace (working internal title), and it's basic premise is that it is a fully simulated (with physical and motion) galaxy sandbox of over 500 billion star systems.
[2025-04-25T14:13:30.714000+00:00] rattus_cz#0: Deterministic physics engine is something i don't even dream of anymore üòÑ
[2025-04-25T14:10:46.491000+00:00] dovos#0: btw most games have ragdoll physics client side only if it isn't a core part of the gameplay
[2025-04-25T14:06:59.864000+00:00] dovos#0: the idea is that the server only holds data. it might reference that animationID is runnig and started at Timestamp but that's it. for ragdoll it get's more complex and would have ideally a deterministic physics engine so that you can use a start state with applied forces and a "ticks since then" count and the client get's the same physics to what the server gets to compare
[2025-04-25T13:28:38.605000+00:00] tamaro.skaljic#0: I have unfortunately no experience in physics yet so I'm not the best one to keep talking about this topic. üòÑ I'm sure someone else will answer you üëç
[2025-04-25T13:27:06.310000+00:00] rattus_cz#0: I mean yeah, i can see for lets say game like bomberman (grid / tilebased map) this is done quite easily, but i struggle when I think about more granular 3d world representation. I've seen the Rapier thread and that looks great. I havent checked the specifics like what kind of data it needs to run the physics. from my feeble unity experience i guess the integration could send world/objects physics colliders and that is stored in DB and used by Rapier
[2025-04-25T13:25:37.021000+00:00] tamaro.skaljic#0: Some people try to integrate rapier (a rust physics engine) into the SpacetimeDB Server Modules as well as the client modules so that the same code can run both in the client and the server. üôÇ
[2025-04-23T19:25:19.444000+00:00] chaserlewis#0: I might try writing a stateless 2d physics engine after my current project
[2025-04-23T19:12:50.133000+00:00] dovos#0: well we have <#1358862705938796746> for physics stuff. tho idk what the current state is
[2025-04-23T19:03:33.546000+00:00] knilch#0: yeah thouse are great sugerstions but i was also thinking in a 3D sense like models and stuff i did see a tool that can make regular models into convex coliders to be used in the rapier physics engine but iam still brainstorming
[2025-04-23T17:16:05.757000+00:00] quatern1on#0: My idea is to build an online chess server that matches players based on rating. Once matched, two players are placed into a game, they play, and the result ‚Äî including the full move history ‚Äî is saved to their game history for future analysis. That part is fairly straightforward with a traditional architecture. The problem comes with scaling. When concurrency grows and there are many players of varying ratings looking for games or playing them, I want to scale horizontally ‚Äî across multiple physical servers. This is the problem I hope SPacetimeDB could help solve: How do I seamlessly match two users with similar ratings who are connected to different servers, and place them into the same game instance? Additionally, I want to show real-time cross-server data‚Äîfor example, a live list of users currently searching for games (like open rooms), filtered by rating range. A list of "friends" who are currently in game etc. All of this should work across servers in real time. This is the kind of complexity I was hoping SpacetimeDB could simplify, since clustering and distributed state seem to be built-in features.
[2025-04-22T23:16:11.834000+00:00] chaserlewis#0: depends what you mean by 'separation' and how critical it is they never touch. Like healthcare data for multiple hospitals ... probably should be separated physically. Different user data? RLS.
[2025-04-21T17:59:03.794000+00:00] cieric#0: Yeah, the main focus from my understanding was just providing what bitcraft needed, bitcraft implemented a custom physics engine so nothing was provided with spacetimedb on release.
[2025-04-21T17:57:25.744000+00:00] miketoast#0: ah yeah I saw that thread already. I am curious about having a separate server handle physics though? I'm only used to have one main game loop handle user movement/collisions (I'm thinking having another authoritative instance could potentially introduce race conditions?) I saw the rapier library as well, although I'm not sure if I should be setting this up myself, weird that this stuff wasn't already present before spacetimedb (library has 8 stars)
[2025-04-21T17:52:41.177000+00:00] cieric#0: While Unreal currently isn't supported, when it is the answer for both is yes. There are 2 solutions so far, some people have implemented rapier into spacetime for server side physics. The other thing attempted was to have authoratative server instances you'd setup spacetime to use. So client sends updates, spacetime forwards it to authoritative server and then the results is feed back through the chain.
[2025-04-21T17:50:09.549000+00:00] miketoast#0: kinda of a silly question... if I'm using Unity or Unreal and I want pretty much everything to be server authorative to avoid the client cheating, I would have to have some sort of custom implementation for physics and completey ditch built in networking systems right? I already saw some discussion around this for Unity
[2025-04-21T15:58:33.122000+00:00] uniquisher#0: This is click to move. I was originally doing wasd movement, but that's a lot more processing on the server, and I'd have to worry more about physics üòÜ
[2025-04-21T13:49:27.915000+00:00] zaxarner#0: I haven't enabled any feature flags, but I thought about enabling `enhanced-determinism`.  I really need to write a test that allows me to step through the physics manually and mock the updates from the server... I've never touched Rust's unit tests, though... but, I think that's my next step to make sure this works.
[2025-04-21T00:17:25.273000+00:00] fogings#0: quick question, is loading local gltf files (that would reside in the container where spacetime is installed) in a server module feasible? or would I have to serve them from another server? asking because of backend physics, files for client would be served from a different server
[2025-04-20T14:39:58.391000+00:00] zaxarner#0: When I run the exact same physics simulation in a local Bevy + Rapier3D project, it doesn't feel floaty. I think the physics being done on the server is good, it's just an issue with my interpolation. I think once I include gravity, it'll be a lot better, but I may be mistaken.
[2025-04-20T14:37:36.387000+00:00] dovos#0: do you have velocity damping? from my experience physics feel floaty if there is too little "drag" in the physics.
[2025-04-20T14:33:12.190000+00:00] zaxarner#0: I have a `Position` and `Velocity` table in STDB. Every physics tick, an update is done to each table. Here's the `Position` table, and the `Velocity` table is pretty much the same thing; ```pub struct Position {     #[primary_key]     object_id: u64,     x: f32,     y: f32,     z: f32,     tick: u64, }```  There's also an `Object` table that just contains an `object_id` and an `object_type`. The `object_type` is used to determine what type of Bevy `Bundle` should be spawned for that object, either `ground` or `ball`.  When a `Position` or `Velocity` update comes in, the data gets put into a `KinematicBuffer` component, indexed by `tick`. Every client frame, the motion of the object is interpolated between the `KinematicBuffer` content at `current tick - 1` and `current tick - 2`. So what the client actually processes from the server is always 1 tick behind, but this shouldn't be a problem because the server is including the velocity in the update and the constant acceleration from gravity can be handled without the server syncing that. I haven't actually included gravity yet, so that may be the main cause of the "float", but we'll see.
[2025-04-20T12:03:17.093000+00:00] dovos#0: <#1358862705938796746>  tries to solve the physics engine problem.  For the deployment alongside stdb that is currently not possible afaik without using a separate self hosted server.
[2025-04-20T07:17:42.638000+00:00] sfdmerch#0: I have a question that I am hoping someone might be able to answer for me Is there a way to automatically spin up specialized clients (e.g., headless Unreal instances in my case) as part of a SpacetimeDB deployment, so they can connect with a trusted identity and act as authoritative simulation agents alongside the database? I would like to avoid having to deal with the deployment of specialized agents manually for simulating AI / Physics.
[2025-04-19T05:44:08.104000+00:00] suiradx#0: Last thing i think is a blurb about physics in modules
[2025-04-18T16:42:16.391000+00:00] chaserlewis#0: Which isn't terribly hard if everything is in spacetimedb for game logic, but physics makes that hard.
[2025-04-18T16:29:46.588000+00:00] dovos#0: Yeah you also would only send inputs or position data of your controlled character over and not the entire physics update
[2025-04-18T16:28:40.475000+00:00] chaserlewis#0: You will need prediction regardless. I think throughput and ok latency is likely more important than lowest possible latency.  Also you can put a lot of non-physics logic in the db. Id measure before getting worried about milliseconds.
[2025-04-18T16:24:31.292000+00:00] dovos#0: For the physics yes. That is also normal if you want to have server authority for physics. <#1358853225679159556> if they are able to run rapier on the server then we will likely be able to use the godot rapier engine with the same server. Not sure if we need to adjust the godot side tho
[2025-04-18T16:21:53.893000+00:00] p3ntest#0: Hey guys I have been thinking about SpacetimeDB quite a bit since I saw its release video, and I keep wondering:  How would I implement any complex logic (like physics interactions with the map) if my entire game is not defined in the server module?  So say I have a world in Godot. I see no way rn to make the server authorative about the movement, since it would need the whole map as a physics collider? So I am basically making my game twice?
[2025-04-18T16:20:37.384000+00:00] zaxarner#0: I think the only way to do that for STDB would be to have the physics "worker" as a normal admin client of the STDB server, but that introduces latency.
[2025-04-18T16:17:36.532000+00:00] sputn1ck#0: I wonder if _in general_ it is worth it to run the physics on the server. I was thinking of some server -> worker architecture. Physics runs on connected trusted workers, which report any hits / violations of players w.r.t. the physics world. But not sure if that is ideal as well.
[2025-04-18T14:06:47.042000+00:00] zaxarner#0: I have something similar working with Rapier, rather than Avian, in 3D.  I'm still not sure what the best approach is... maybe it would be better to run a Bevy ECS in STDB, but my initial thought was "that's overkill", so I went with just adding physics to the server.  https://discord.com/channels/1037340874172014652/1358862705938796746
[2025-04-18T10:25:27.456000+00:00] sputn1ck#0: got avian2d physics working! the "ball" npc bounces on an invisible floor
[2025-04-17T20:33:15.904000+00:00] sputn1ck#0: first physics engine now supports "no-std" which allows it to be run in stdb-bevy! https://github.com/Jondolf/avian/pull/703, starting to play around with it a bit
[2025-04-17T15:38:15.483000+00:00] uniquisher#0: this makes me very interested to know how they handle their physics in their game through unity, which they mentioned they might talk about
[2025-04-17T15:04:12.164000+00:00] uniquisher#0: Ive been thinking more about this how clients can be created to offload some functionality from the server and Im assuming this is how you could handle a bunch of physics or pathfinding stuff, **if** I'm understanding it correctly. You could have a trusted client that handles, for example, nav mesh pathfinding in unity, and then feeds the position data/path data/inputs back to the server. If your worlds are large, you could spin up multiple clients per sections to split the workload even further. Then you could also have a client for handling unity's physics, so you dont have to rewrite or integrate a physics engine   If thats so, that is pretty damn awesome
[2025-04-17T06:16:39.274000+00:00] mynameischippy#0: Option 2 requires you to do a lot more, baaaaaaasically either a physics engine like rapier, or you try to roll your own physics and calculate the position *based* off the input at any given tick. It's *pretty much* the same as option 1, players update their input via reducer, and then you have a scheduled tick reducer but instead of adding an `InputTick` to a table, you'd just calculate the new position of the entity, and change it's row.
[2025-04-17T06:14:52.111000+00:00] mynameischippy#0: With input-based movement, you have two options:  (1) have the clients simulate the received input (2) have the server simulate the received input  Option 1 requires a few things: your clients physics tick needs to be synced with the frequency of your servers input tick, otherwise, things will get out of sync very quickly. you'll need an input tick table, for clients to run through (this would also help clients stay deterministic in their simulation, if someone d/c's and reconnects, you'll need the simulation history).  \- `Player` table would contain a column containing the current input from the player. Players can update this via an `UpdateInput` reducer, which they can call whenever from the normal non-fixed update loop. \- `InputTick` table which would store the "frame" or "tick" whatever u wanna call it, and the input to simulate on that given frame or tick. The downside would be... the server doesn't really know the actual coord position. You could do a workaround for this, where clients sync their position intermittently, and then check their simulation against that, but there's the same issue with cheating.
[2025-04-16T18:54:09.737000+00:00] chaserlewis#0: Can you write threaded workloads then 'sync' them on schedulers in spacetime db? I'm thinking of trying to get some basic rapier2d physics simulation  running in it and was going to ask before jumping in the deep end if anyone has any insight.  It would be nice to have real physics and be able to have it running in a separate thread that gets sync'd at regular intervals. Just not sure what limitations exist on threading.
[2025-04-14T21:11:29.494000+00:00] sputn1ck#0: FYI with bevy 0.16 we will be able to run a bevy app _inside_ of our spacetimedb host. I've created a very basic example repo(first time with rust) here https://github.com/tapmondev/bevy_spacetimedb_server_example shoutout to<@151044810906664960> for the spacetimedb client code and the awesome admin tool. It looks like rapier and avian (two most popular bevy physics framework) should also be supported in the future
[2025-04-14T20:40:12.622000+00:00] boppygames#0: We have discussed in the past making a guide to show people how to get server side Unity physics in a module, it's not *that* complicated and that would at least get authoritative Unity physics working
[2025-04-14T18:47:15.658000+00:00] boppygames#0: Out-of-the-box physics support is something we're very interested in doing and when we end up adding 3D physics support then more than likely we would end up shipping 2D physics as well üôÇ
[2025-04-14T17:16:38.515000+00:00] dovos#0: (and it is a pretty good physics engine that is consistent. so no "unity bounces"
[2025-04-14T17:15:19.713000+00:00] dovos#0: <#1358862705938796746>  there is this project that aims to solve the physics engine on the server problem. rapier has both 2d and 3d.
[2025-04-14T17:11:45.314000+00:00] dovos#0: the geo position of the client defines the lag between the users as it is a physics limitation. even if the servers sync between each other, there is still the lag between the servers. the difference would be that the client has a more stable connection and is less prone to random dc. if you have a multi server setup with high ping then it get's pretty complex as it needs to do rollbacks and solve merge conflicts and so on. that is why even today most games still have geo region separated servers even with their 100+ mio$ budgets. the advantage with stdb is that the db is on the same server machine that your server code runs on. that means there is no network travel needed to access the db from the server code. then it is even more sped up as it has the db data in memory at all times so it removes the slow reading from disk. now here comes into play what exactly your games/apps requirements are. many games don't actually need to update on the server with 60+tps (ticks per second) and can get away with way lower tick rates and thus the ping doesn't matter as much.
[2025-04-14T17:04:33.368000+00:00] annoyedalchemist#0: We don't have ready-made 2d physics either, so I'm not sure what the perceived difference is.
[2025-04-14T15:43:16.410000+00:00] dovos#0: but high ping between continents will always be a problem as it is a physics limitation
[2025-04-13T17:29:11.376000+00:00] dovos#0: it can if it doesn't matter that it runs on TCP for now. they plan to add UDP but that is a future thing (tho highly requested so more sooner than later). then server side physics are currently still in WIP <#1358862705938796746>  the speed of stdb itself is fast enough for shooters. tho you still need to write the rollbacks and prediction logic of the bullets and so on
[2025-04-12T16:23:34.753000+00:00] dimidrol112.#0: Scheduled reducer can maintain it. How much objects reducer can process without choking? Example - simulating 3d physics with 20ms step on server in scheduled reducer.
[2025-04-12T11:22:56.069000+00:00] daxode#0: Yup, I used statics at the time as a proof of concept - plan is still to use serde to get things serialized correctly, though I still believe we need to minimize what and when we serialize, so the physics system can get fast access where it's needed
[2025-04-11T22:46:57.828000+00:00] dovos#0: no only the collisionshapes. mesh, textures and so on don't need to be loaded for physics to work
[2025-04-11T22:43:57.033000+00:00] mynameischippy#0: There are licensing issues bundling up unity/unreal's physics and including them directly in stdb. I'm honestly not too sure on the specifics there, but that's what's been said.
[2025-04-11T22:42:34.024000+00:00] mynameischippy#0: BitCraft, their MMO, is fairly light on overall physics, but the server does authenticate movement commands and check if they're valid or not. For BitCraft, this isn't too overly complex, since you've moving on a grid, versus WASD or something like that.
[2025-04-11T22:41:34.107000+00:00] mynameischippy#0: Physics are totally possible in stdb üëç There's a few people working on getting Rapier working here: https://discord.com/channels/1037340874172014652/1358862705938796746
[2025-04-11T22:34:37.324000+00:00] force32#0: <@342842214940016641>  Awesome tool! I‚Äôm new here, and I'm curious ‚Äî how do you handle server-side physics or collision detection in an MMORPG so that players can‚Äôt cheat? For example, if I have a client-side map in Unity, how do you ensure that the player‚Äôs position comes from the server? Isn‚Äôt a backend system for an MMORPG useless if this isn‚Äôt possible?
[2025-04-11T22:11:54.330000+00:00] mynameischippy#0: That's awesome. Interpolation would help, but if the physics simulation is being ran on the client, and then you're also receiving updates from the server, you're still going to have a sorta-rubber bandy jitter as the client gets the state that's a few frames behind what it predicted.   I'm not a client-side prediction expert, but how I'd try to tackle that problem would be to somehow compare your local clients state vs the server's state. If the overall state of each networked object is within some tolerance %, ignore the server's state update for that particular object, letting the client fully handle the physics on that frame. However, if the particular object is out of the acceptable % range, you can "rollback" or correct, the state, and then try again at client physics from that particular state frame.
[2025-04-11T21:13:53.314000+00:00] glavin001#0: Ah interesting. Is there something specifically which was discouraged by SpacetimeDB devs or using physics (e.g. Rapier) in general was? Want to try to avoid gotchas and follow best practices.
[2025-04-11T14:54:44.487000+00:00] mrsamo#0: Yes + bullet hell physics are easy, mostly projectiles moving in a straight line, thanks for the reply !
[2025-04-11T14:10:49.041000+00:00] annoyedalchemist#0: The demo I'm referencing was: start with a module full of circles bouncing around in a 2d plane. In the initial version, they only bounced off the walls/boundaries of the space, and passed through other balls. Then Tyler hotswap-published a new module version which updated the physics reducer so they started bouncing off each other too.
[2025-04-11T14:06:58.257000+00:00] annoyedalchemist#0: Sure, I don't see why not. <@342842214940016641> 's GDC demo was physics for bouncing balls, and that worked fine.
[2025-04-11T05:10:19.745000+00:00] dragonkhoi#0: is there an example Unity + spacetimedb project with server side physics?   eg if a player shoots a rocket at another and sends them flying how would that be accomplished architecturally (with unity colliders? unity rigidbodies and physics? doing math in the server?)
[2025-04-11T01:15:06.997000+00:00] hexenon.eth#0: no need for physics, just need the update loop for now with a fixed tick rate
[2025-04-11T01:13:54.933000+00:00] dovos#0: <#1358862705938796746> WIP physics stuff also scheduled reducers and validation checks on the clients reducer call. choosen method depends on what your game is
[2025-04-11T01:13:03.548000+00:00] hexenon.eth#0: i have a question, is there a way to run an update loop on spacetime db to check physics or some validations ?
[2025-04-10T21:26:54.749000+00:00] mynameischippy#0: would certainly be a great  proof of concept for physics in stdb
[2025-04-10T21:26:21.170000+00:00] bauskie#0: i think itd be cool to make a silly physics sandbox game ala noby noby boy.
[2025-04-10T21:04:58.404000+00:00] bauskie#0: last q, it's hard to gauge how much energy you would need to run a game of x size with y clients. do you have any references? like a simple physics game with 10 clients would cost $5/mo
[2025-04-10T20:55:50.145000+00:00] bauskie#0: cool. thanks for the answers. how complex are your reducers? have you managed to do a physics time step in them. besides a simple velocity integrator, like collision resolution.
[2025-04-10T04:47:32.872000+00:00] aesthezel#0: I doing something similar with deterministic physics but using Box2D physic engine on Unity, I gonna try to do snapshot compression too and when I finish my game do a open source version (with third parties assets) What I have read here in recent days has inspired me a lot to continue continuing my research
[2025-04-10T04:06:24.660000+00:00] oliver.davies#0: I spent some time with that article and the example code at the end - I got a version of it working well in rust with some Unit tests + a local networking experiment. For 500 objects syncing physics state (position, rotation and angular velocity) I was able to do some pretty signfiicant compression: ``` --- Compression Report --- Total Compressed Payload Bits Sent: 2263440 Estimated Uncompressed Bits (for processed frames): 18585000 Compression Ratio: 0.1218 (Compressed / Uncompressed) Data Reduction: 87.82% Simulation complete. ``` (with 10% of the objects changing each frame, I was able to compress it down to about 50kb per second, which is pretty good)  This uses a delta across many frames, an active bit, and many of the other bit fiddling techniques outlined in the example CPP that the above article pointed at.  I'll continue to clean it up and then probably make a Unity example and opensource it.
[2025-04-10T03:45:31.131000+00:00] thehalu#0: fun watch, good comments too https://www.youtube.com/watch?v=IhEaw3Kuhf0
[2025-04-09T21:21:38.306000+00:00] oliver.davies#0: Also I tossed a helping comment in regarding the physics:
[2025-04-09T20:31:31.578000+00:00] oliver.davies#0: This is a pretty impressive set of tricks to heavily compress bandwidth: https://gafferongames.com/post/snapshot_compression/
[2025-04-09T20:15:07.213000+00:00] oliver.davies#0: I looked into him - he has extensive tutorials / overviews on networking, in various complex scenarios. He very well seems to know what he is doing https://gafferongames.com/post/snapshot_interpolation/
[2025-04-09T20:10:24.322000+00:00] cieric#0: I mean if you were to imagine something like a virtual board game stutter wouldn't be an issue since physics shouldn't be sent across, just actions.
[2025-04-07T21:30:21.602000+00:00] oliver.davies#0: The server would tick, run all of the world physics (at minimum where players are) then once the tick had completed send the changed object state to the clients. E.g. position changes / corrections.  Meanwhile, the client is on a "newer" tick internally technically and runs the physics locally to predict where the world state _will be_. Once it receives the _true_ server tick, it corrects the ground truth for the client.  In terms of _specific_ implementation details. I haven't gotten around to really digging into that for spacetime. My experience says that we at minimum need: - A global time integer frame tick - Forcibly putting a lot of rigidbodies to sleep for distant areas.
[2025-04-07T21:20:35.549000+00:00] oliver.davies#0: Awesome work!! Browser based physics capable MMO dream creeps closer lol
[2025-04-07T19:13:45.703000+00:00] dovos#0: once we know how to get one engine to run correctly and in a good way, it shouldn't be too hard to use the same or similar methods to run other physics engines
[2025-04-07T18:25:52.119000+00:00] imperialoutrider786t#0: Avian seeks to be a ecs physics crwte for bevy maybe a custom solution would be good
[2025-04-07T18:17:10.444000+00:00] glavin001#0: Also, are controllers such as: - Character Controller: https://rapier.rs/docs/user_guides/rust/character_controller/ - DynamicRayCastVehicleController: https://docs.rs/rapier3d/latest/rapier3d/control/struct.DynamicRayCastVehicleController.html already supported in the server code? If not, would be good to think about how to add, since those are really useful for games I find.
[2025-04-07T18:16:13.862000+00:00] imperialoutrider786t#0: Theres a bevy physics crate called avian,itd be good to include that
[2025-04-07T18:06:08.574000+00:00] glavin001#0: [not urgent] <@119921520968466432><@560845322364911656>  : Could you give me some pointers on setting up the SpacetimeDB server part from https://github.com/Daxode/rapier4unity ? Later tonight when I have time I want to setup as much as I can of what works today, learn the foundation so I can be more helpful in our discussions moving forward.
[2025-04-07T17:55:15.544000+00:00] glavin001#0: Discuss creating a reusable, go to solution for Server Authoritative Physics with Rapier powered by SpacetimeDB!
[2025-04-07T17:52:39.418000+00:00] glavin001#0: Server Authoritative Physics with Rapier
[2025-04-07T17:47:34.334000+00:00] dovos#0: i'm in for using rapier as official server side physics engine
[2025-04-07T17:32:53.515000+00:00] zaxarner#0: I'd love to see more examples of how people are doing physics on SpacetimeDB. My understanding is that a full physics simulation probably couldn't work well, but I'd love to have basic server-authoritative collision and movement.  I'm interested in creating a Bevy+Rapier client with Rapier on SpacetimeDB... lol
[2025-04-07T17:17:35.274000+00:00] glavin001#0: <@87741405530693632>  <@119921520968466432> : I'm really impressed by your rapier4unit project! I have been searching for a solution for server authoritative physics using Rapier and only learned about SpacetimeDB today. My interest is for building web games with Three.js.  Do you think we could **collaborate on an open source solution for this? Shared SpacetimeDB backend running Rapier, and you already have Unity+Rapier client, and I'll build a Three.js+Rapier client**. I'm new to all of this, including Rust, but eager to learn and think this is a critical (and surprising) gap preventing awesome multiplayer games with physics from being made.
[2025-04-06T18:10:35.309000+00:00] daxode#0: Hi, Nordic Game Jam 2025 just finished! (to those who don't know, it's a fairly big physical game jam (~600people), that starts out with a bunch of great talks from many familiar faces in gamedev, Freya Holmer, Brackeys, Andre Cardeso (MixAndJam), and then the 48hour jam starts followed by a showcase at the end)  Anyways, during said jam, I deciced to make a game with SpacetimeDB, however I wanted it to work on Mobile, and in the Browser (_ideally at the same time_). However, one big problem stood in the way. SpaceTimeDB's SDK for C# does not support webgl, due to multi threading, and it's use of `ClientWebSocket`. So I spent the first 30hours of the jam fixing it, leaving me with 18hours (4hours of which I decided I had to get just a tiny bit of sleep). The final _game_* can be found here: https://daxode.itch.io/eat-to-the-deep, and should work in most browsers, however some android phones will not render, but SpaceTimeDB does still work even in those instances.  I'll also like to note, people became quite curious about SpaceTimeDB as a result of said jam game üòÜ  Tl;Dr. **Unity WebGL** now works with **SpaceTimeDB**, and a PR can be found here: https://github.com/clockworklabs/com.clockworklabs.spacetimedbsdk/pull/286
[2025-04-05T14:53:07.558000+00:00] zaxarner#0: What are your reasons for having a Game Server, in addition to the World Server? How complicated is the physics?  I'd like to have server-authoritative movement and collisions in my Bevy + STDB game, but I'm not experienced enough with Bevy & Rust networking to implement a GS. I did something similar in Godot with a Godot GS + Nakama, but STDB is so much simpler and I'd like to learn Rust... Bevy & Rust networking just feels incredibly daunting right now.
[2025-04-05T13:26:16.717000+00:00] sac_a_biere#0: I might be able to have a working POC for my space game with a dynamic game servers assignment by the end of the weekend!  **Context:** The game is a space simulation similar to Elite Dangerous or EVE Online, where players fight to control star systems. Resources in the game will be limited by design, to force players to either fight or trade. The galaxy is procedurally generated in a semi-realistic way.  **There are three main components:** 1. **Clients** (rust, bevy) which are players, connected to game servers and the world server 2. **Game servers** [GS] (rust, bevy) Handle the physics simulation for a single star system (one GS = one star system). They connect to the world server 3. **World Server** [WS] (rust, SpacetimeDB module)  Manages the global state of the game universe.  **Current flow:** - A pool of n (currently n=3) game servers wait to be assigned a star system by the WS (using **Kubernetes**), they register to the WS on startup by calling a reducer with their IP and port. - Players connect to the WS, which returns their player data ‚Äî most importantly, their current system (or a starter system if they're new). - The player then requests to move to that system via a reducer. - The reducer:   - Finds an available GS   - Assigns the requested system to that GS   - Updates the player's current system accordingly - When the GS receive the assignement:   - It subscribes to all relevant system data (planets, stars, markets, etc.)   - It calls a reducer to set its state to "ready" - Players are subscribed to game servers based on` game_servers.system_id` and if game`_servers.ready` is true, the client receives the corresponding row and connects to the GS‚Äôs IP and port. - Once the GS receives the connection:   - It calls a reducer to mark the player as online   - The network library handles entity replication between the GS and the clients (like other players and combat, maybe NPCs in the future if I decide to add some)  Now I just need to add the graphics on the client (like spawning a sphere for planets & stars) and the spaceship, I will use `big_space` for this (I've talked about it in <#1037343145941274654>). SpacetimeDB made it **very** quick and easy and to reach the state where I'm at, I can't wait to show more once I'm done with rendering planets and stars
[2025-04-04T14:47:36.581000+00:00] dreamlightglitter#0: I wanted the game to be as complex as possible, so I thought of fluid mechanics, hundreds of status effects, thousands of entities, potentially particle system, etc. In short, simulating the entirely new custom physics system.  But do I need them? IDK.
[2025-04-03T02:50:49.440000+00:00] oliver.davies#0: I implemented joints and axis locking in [rapier4unity](https://github.com/Daxode/rapier4unity) today üí™
[2025-04-02T05:04:42.859000+00:00] daxode#0: Yup (to people not in the know, com.unity.physics is the physics team's own physics engine, and not just PhysX, it's quite stable, and fully stateless (which is great for server stuff)),   I'm painfully aware that they are somewhat deterministic, because I really wanted to use it, but it's way more complicated to get working outside Unity, whereas Rapier will just work üòÜ
[2025-04-02T04:35:44.882000+00:00] doodlechaos#0: Unity physics for ECS is also deterministic. I believe the same technique could work.
[2025-04-02T04:16:12.263000+00:00] oliver.davies#0: It let's you 3d build games that require accurate projectiles through an environment for example. As otherwise, the server would just have to trust the client's physics (yay for hackers).. or (as we are doing) calculate the physics server side too.. but then the problem is that you need them to be the identical physics engines.. that are deterministic. Etc. I have had to solve this problem before üòÖ
[2025-04-02T04:14:12.070000+00:00] oliver.davies#0: Basically, this project is about making it interop as a replacement for Unity's built in physics so we can then also compile it to wasm alongside spacetime. It can be used in a deterministic mode, meaning if we have a server tick system (e.g. increasing integers)  we can simulate on the client and server smoothly in an identical manner. The reason we need it locally in Unity is to allow the local client to run predictions ahead of time.
[2025-04-02T04:12:37.535000+00:00] oliver.davies#0: It is an generally pretty stable opensource Rust physics engine: https://rapier.rs/
[2025-04-02T04:10:52.076000+00:00] oliver.davies#0: It is using Rapier (the rust physics engine) inside of Unity. Just locally here though, not networked at all. It is just behaving as a replacement for PhyX currently.
[2025-04-02T01:59:26.198000+00:00] 3blave#0: It was related to merch, but I do agree regarding physics
[2025-04-02T01:58:07.880000+00:00] oliver.davies#0: If this is related to physics - I think it is a good idea to keep an eye on. It'll end up as a common request I think, which is part of the reason I am focusing on it.
[2025-04-02T01:52:50.734000+00:00] 3blave#0: Depends on the complexity of the physics involved
[2025-04-02T01:29:04.404000+00:00] justjumper_#0: Yup I guess that makes my question partially moot; I was thinking that there were already some established libraries in the ecosystem for handling hitbox collision, physics, etc. in the reducers and we wanted to make sure that whatever format we chose would be compatible with those. But it sounds like there is no standard yet.
[2025-04-02T01:24:10.320000+00:00] dovos#0: well you need to make a type on the server that you can use to send over the data as it doesn't know how to serialise arbitrary classes. but that in itself isn't the problem. https://discord.com/channels/1037340874172014652/1134597033613869207/1356782020646142143 as said an hour ago some of us are actively working on getting a physics engine to run on the server side as that is currently still an open problem
[2025-04-02T01:14:33.798000+00:00] dovos#0: you have models and textures and so on (all assets that are big file sizes) only on the client side and only a data representation of it on the server. for collisions you give only the transform data and an id of it over the reducer and have the server get the right collision shape from the physics world and apply the transforms after checking if they are valid. or something like that. you want to keep the data transfer as small as possible
[2025-04-02T00:15:05.894000+00:00] oliver.davies#0: It is a lot more of Dani's genius than mine, I am more or less just implementing as many of the physics features that Rapier has into Unity. Dani has basically figured out how to replace PhyX in unity with this, which is incredible. You don't even need to change any of your workflows, it just works with normal colliders, rigidbodies and Raycasts etc.
[2025-04-02T00:11:12.021000+00:00] oliver.davies#0: My goal is to have a larger scale physics driven world using Spacetime for a particular project I've wanted to create for a bit, so I am heavily invested in making this work.
[2025-04-02T00:09:06.506000+00:00] dovos#0: is that client and server physics or just client side?
[2025-04-02T00:07:21.513000+00:00] oliver.davies#0: <@119921520968466432> and I are actively working to bring the Rust Rapier physics engine up to speed within Unity for usage. I am working on kinematics today. We already have a lot of functionality so far. https://github.com/Daxode/rapier4unity
[2025-04-01T23:46:04.831000+00:00] dovos#0: well most rts don't actually need 60fps server side code. most of it is client side predictions. that said. currently it fails on that running a physics engine on the server is not really solved (wasm at fault). we have some examples of people who got some running but it is more hacky than good/usable on large scale. in one or two years tho i totally see stdb to be far enough to handle most rts wihtout issue.
[2025-03-29T17:37:10.215000+00:00] dinopalla#0: For my hobby project, I'm using 3D physics with Rapier on a server module. Have you tried it?
[2025-03-29T17:31:52.117000+00:00] 3blave#0: It would also apply, but my assumption is that the physics for a 2D game is simpler to implement yourself. I think if you're looking to ship within 3 months, it's possible we have UDP in that time, but I don't think you should count on it. If you think you need those features within that time I would recommend not using SpacetimeDB for this project
[2025-03-29T17:04:16.900000+00:00] sam_makes_games#0: I'm trying to decide what tech to build for my game that will be complete inside of the next 3 months. I'm not sure I see how this "because you need to roll the physics yourself" wouldn't also apply to a platformer (or any game requiring physics), given that the platformer in question will _also_ require client-side prediction, lag compensation, conflict reconciliation, etc. Similarly certain gameplay features will also necessitate UDP transport.  No physics of any kind with spacetimedb right now... so its good for turn-based games, non-realtime games, or games with very low inputs (like command-based MMOs?)... would this be accurate?  `although it's conceivable we would have them in the next several months` Can you help me understand 'conceivable'; no specific ETA or roadmap estimate?
[2025-03-29T02:56:17.877000+00:00] 3blave#0: You should be able to do a fast paced platformer no problem. FPS is trickier because you need to roll the physics yourself. There are several things that we're working on which will make FPS more suited to SpacetimeDB:  1. deterministic client sim (running SpacetimeDB on both client and server for client-side prediction) 2. alternative transport layers (e.g. reliable UDP)  We don't have those today, although it's conceivable we would have them in the next several months, so it depends on how fast you're planning to ship your game
[2025-03-29T02:42:11.138000+00:00] sam_makes_games#0: `if we have a good system to run the physics engine in sync with how the db works`  ü§î
[2025-03-29T02:41:43.764000+00:00] dovos#0: currently not yet as getting a physics engine to run on the server is still an unsolved problem that is getting worked at. if we have a good system to run the physics engine in sync with how the db works then it should be easily possible to run faster paced physics games
[2025-03-29T02:39:31.403000+00:00] sam_makes_games#0: Hello. I'm trying to understand whether or not SpacetimeDB would be well-suited to handling the realtime physics demands of a game like a fast-paced platformer (think like an online multiplayer parkour game with player collision) or an FPS like a counter-strike.  Of course elements that are transactional and less high frequently updating (player inventory, match score, things like that) are great for spacetimedb - that's obvious - but I'm wondering about my actual gameplay simulation in fast-paced games like the ones described above. Games that necessitate client-side prediction, lag compensation, conflict reconciliation, etc.
[2025-03-29T01:07:12.259000+00:00] sticks6110#0: I ended up finding a workaround, I needed my collider data that is stored in the database to be loaded into my physics implementation
[2025-03-28T23:02:57.491000+00:00] aesthezel#0: Another physics mate here
[2025-03-28T17:48:07.885000+00:00] aesthezel#0: I will finish my 2d physic experiment on Unity and definitely try something in 3D with bevy
[2025-03-27T22:18:57.701000+00:00] 3blave#0: Depends if you need server authoritative physics
[2025-03-27T21:25:00.114000+00:00] dovos#0: bitcraft doesn't really need physics and it doesn't matter that much if someone cheats and phases through objects compared to other games
[2025-03-27T21:23:17.686000+00:00] aesthezel#0: Woops I'm doing all the physics in server side haha, but my approach is more for knowledge and not for production planning; but make sense for less workload and cheaper reducers make physics on client side
[2025-03-27T19:25:25.662000+00:00] thehalu#0: i mean you can have an authoritative physics client and basically treat it as a traditional DB/server but otherwise yea
[2025-03-27T19:09:04.499000+00:00] dovos#0: currently bitcraft runs the physics on the client side and just does sanity checks on the given data. ie is the velocity/acceleration between the old pos and new pos realistic and so on
[2025-03-27T19:08:23.809000+00:00] dovos#0: you can do physics engines on the server side but it is VERY hacky and potentially unstable
[2025-03-27T19:07:06.838000+00:00] kofkof#0: Thank you guys. Yes, it contains physics. If i write my own physics in the server side will it be too heavy? and should i do it in server or client?
[2025-03-27T19:04:37.749000+00:00] tamaro.skaljic#0: There is no physics integration for SpacetimeDB right now so you need to implement the server side yourself (and can't use unity physics)
[2025-03-27T19:04:37.123000+00:00] dovos#0: it depends on if you need the physics engine on the server or not. if not then it doesn't matter if it is 2d or 3d
[2025-03-27T18:29:56.999000+00:00] dovos#0: do you need a server side physics engine? if yes then it might not yet be time to use stdb. if not then you can try it and see if rewriting your multiplayer code is worth the switch
[2025-03-27T15:53:36.459000+00:00] annoyedalchemist#0: Our datastore doesn't (currently) allow for updating rows in-place. From the database's perspective, rows are immutable, and have no unique identifier other than themselves. `primary_key` columns are a layer on top of this, where we say that any two physical rows that have the same value in the primary key column are the same logical row. In this model, deleting a physical row and inserting a new physical row with the same primary key value makes a logical row update. We happen to process logical updates on in the SDKs, rather than server-side.
[2025-03-26T20:37:14.212000+00:00] mynameischippy#0: I'd say the biggest challenge rn is server-side physics, but we've got some trailblazers over in <#1150542804347535460> that have been workin' on that (using Rapier or Jolt)
[2025-03-25T17:46:20.930000+00:00] daxode#0: Thanks for the heads-up!, the other good thing about using rapier, everything is serializable by default, and you can split which parts you want to serialize, so I'm not overly worried with the way I'm doing things now, I can switch to storing it as stdb state fairly easily imo, though I'm hoping I can find a way to not serialize/deserialize the data, but instead create the tables directly, as i am slightly worried about the overhead of copying every physics tick, just for the sake of updating üòÖ
[2025-03-25T17:30:22.534000+00:00] mynameischippy#0: When looking to the future of maincloud and the scaling there, storing the physics state in a global static vs in a SpacetimeDB table has issues. First, and probably the one that most will run into in the immediate term, if you hotswap out your module to change reducer logic, that state is now gone unless it's stored in a stdb table and in some way can be deterministically reconstructed. The second example, not too relevant now, but as maincloud starts offering scaling for other regions, they may spin up additional modules in those other regions, syncing the tables data via imc or some other system, the static state you have in each module will be dsynced, unless you're reconstructing it via stdb tables.
[2025-03-25T15:51:39.794000+00:00] dovos#0: The hardest part is to get the physics world to run
[2025-03-25T15:50:47.115000+00:00] aesthezel#0: I had planned to use Jolt later, but I haven't used it yet because I wanted to start with something basic to understand how to handle the concept of the physical world. I imagine that Jolt has a much higher degree of difficulty
[2025-03-25T15:39:16.646000+00:00] dovos#0: I didn't even think about making the physics static
[2025-03-25T15:38:28.739000+00:00] daxode#0: Interesting, When I did the rapier server I just opted for the static global physics world
[2025-03-25T15:37:37.444000+00:00] dovos#0: Well that's one way. All my tests failed as I'm unable to store the physics world in a table or just the reference to it as the modules are static and I can't just have it as global variable
[2025-03-25T15:34:44.757000+00:00] dovos#0: So you recreate the physics world each tick?
[2025-03-25T15:30:55.333000+00:00] aesthezel#0: Sure,  I have a reducer for all movements running on 40hz  ```cs [Reducer]     public static void MoveAllEntities(ReducerContext ctx, MoveAllEntitiesTimer timer)     {         var setting = ctx.Db.settings.Id.Find(0) ?? ServerSettings.FallbackSetting;         if (setting.FreezeMovement) return;              var currentTime = ctx.Timestamp;         var deltaTime = Math.Clamp(             (currentTime.MicrosecondsSinceUnixEpoch - timer.LastUpdateTime.MicrosecondsSinceUnixEpoch) / 1_000_000.0f,             0.02f,              setting.MovementPackageFrequency         );                  Physic.SimulateTick(ctx, setting, timer, deltaTime);                  timer.LastUpdateTime = currentTime;         timer.CurrentServerTick = timer.CurrentServerTick == ulong.MaxValue ? 0 : timer.CurrentServerTick + 1;         ctx.Db.move_all_entities_timer.Id.Update(timer);     } ```  I create a Physic class that handles all related to, using Box2D  ```cs public static void SimulateTick(ReducerContext ctx, Setting setting, Tables.Scheluders.Module.MoveAllEntitiesTimer timer, float deltaTime)     {         PhysicsWorld = new(Vector2.Zero);                  var physicsStates = ctx.Db.physic_state             .Iter().ToDictionary(physicState => physicState.CharacterId);                  var entityMap = new Dictionary<uint, WorldPhysicBody>();                  try         {             foreach (var worldInstance in ctx.Db.worlds.Iter())             {                 if(PhysicsWorld.GetBodyList() == null)                     CreateMapBoundary(PhysicsWorld, worldInstance.Limits.BoundPoints);             }                          foreach (var entity in ctx.Db.world_entities.Iter())             {                 Body body;                                  if (physicsStates.TryGetValue(entity.CharacterId, out var state))                 {                     body = PhysicsSerialization.DeserializeBody(PhysicsWorld, state, MassToRadius(0.008f));                 }                 else                 {                      body = CreateNewBody(PhysicsWorld, entity, setting);                     var newState = PhysicsSerialization.SerializeBodyState(body);                     ctx.Db.physic_state.Insert(newState);                                          physicsStates.Add(entity.CharacterId, newState);                 }                              ApplyForces(body, entity);                              entityMap[entity.CharacterId] = new WorldPhysicBody                  {                      Body = body,                     Entity = entity                  };             }                          PhysicsWorld.Step(deltaTime, 8, 3);                          foreach (var entityOnMap in entityMap)             {                 var position = entityOnMap.Value.Body.GetPosition();                 var entity = entityOnMap.Value.Entity;                                  ctx.Db.world_entities.CharacterId                     .Update(entity with                     {                         Position = new DbVector2(position.X, position.Y),                          Speed = setting.AllEntitiesSpeedClient,                         LastServerTick = timer.CurrentServerTick                     });                                  ctx.Db.physic_state.CharacterId.Update(PhysicsSerialization.SerializeBodyState(entityOnMap.Value.Body));             }         }         finally         {             PhysicsWorld.ClearForces();         }     } ```  I recreated a physic world that I can set bounding inside, I've a new table PhysicState that handle a binary data of the rigidbodies and collisions only and I use this for keep the previous state in the calculations.  ```cs [Table(Name = "physic_state")] public partial struct PhysicState {     [PrimaryKey]     public uint CharacterId;     public byte[] BodyTransform;     public byte[] LinearVelocity; } ```  I'm still learning about some fixes and better use cases to keep all the physics in good performant https://box2d.org/documentation/
[2025-03-25T08:08:47.647000+00:00] aesthezel#0: Maybe with rapier https://rapier.rs/docs/ or PhysX for Rust https://github.com/EmbarkStudios/physx-rs
[2025-03-25T08:08:02.450000+00:00] alp82#0: This is awesome! Is there a way to use a physics engine in rust server as well?
[2025-03-25T05:28:33.130000+00:00] oliver.davies#0: Rapier's stable box stacking already bests PhyX.. though I am sure it is less performant... still good to see though Overall pretty impressed though can run a 400 box stacking simulation and the physics step is running at 10000 fps.. I think it is safe to say that it would likely be the network that would give out first. (also just tried a 2k box setup, equally robust output, very solid)
[2025-03-25T05:18:14.554000+00:00] aesthezel#0: I started my basic implementation of physics days ago with a simple collision of polygons, but today I wanted to do a couple of extra steps and use a complete library; The result was quite good imo
[2025-03-25T05:10:24.439000+00:00] oliver.davies#0: made me think about trying to get Rapier working on the rust server side ü§î https://rapier.rs/docs/ (upon searching it looks like some other people here have been looking into it, very cool)
[2025-03-25T04:58:20.928000+00:00] aesthezel#0: New update! I adapt [Box2D physics](https://github.com/erincatto/box2d) inside SpacetimeDB all physics server-side PS: I fix some thing in 2nd video like sliding
[2025-03-23T17:28:05.378000+00:00] mynameischippy#0: Our track pad is just one giant pad tho, no physical buttons, is that the same for u?
[2025-03-22T23:50:07.860000+00:00] lukewaffel#0: <@342842214940016641> Will the inter module connect thingy be available for on prem use too? Or only maincloud? Or has this not been decided yet?  And could this perhaps also facilitate communication to a module on a different physical server?
[2025-03-21T22:26:28.154000+00:00] mynameischippy#0: ^ def, another thing to consider is how lightweight your movement reducer is. if its super efficient, you can get away with a lot more calls. but if there's a ton of checking in it, or like you run physics against it, you may have to slow it down. Best advice is to play around with it until you find something that feels right for your game.
[2025-03-21T18:25:15.858000+00:00] aesthezel#0: I use PolygonCollider from Unity only for easy draw a polygon, but not for client collision, I have all collisions disabled via Client, and my character doesnt use client physics, all those calculations (and teleports triggers too) are sended by server
[2025-03-21T08:01:03.327000+00:00] daxode#0: So, got more things working. I'll probably upload to a public git repo soon ‚Ñ¢Ô∏è Either way, now RigidBody.AddForce, and Trigger events work - It _looks_ like normal Unity physics, but it's actually all Rapier üòÖ - Note that this doesn't actually require engine changes, just a variation of tricks, including ILPostProcessing üòÜ   This version is the Client version, once it feels more finished I'll go back to the Server version i did so I can hook them together üòÖ
[2025-03-20T18:28:22.416000+00:00] fizzgamingprod#0: Is there a place where the code for the 1000 object physics test game shown in the demonstration video, we are running  600 objects that are not even colliding at 60fps and its lagging the Maincloud db with not logs spam, might be nice for some sort of logging/analytics, i can see total calls but thats not helpful, i tried making some specific logging for time between calls and it was just being slow because of the logging itself so removed it, I have the reducer running at ~16ms timer so should be about 60fps, but the server is running it actually even slower due to call time  Examples of how physics was integrated would be nice, we also were just using super basic circle collision in a 2D world just based off position and radius
[2025-03-18T22:50:47.544000+00:00] mynameischippy#0: so they are keeping physics relatively simple there
[2025-03-18T22:50:24.193000+00:00] dovos#0: as you can't save the physics engines objects inside the tables as it doesn't know how to convert them into spacetimedb types
[2025-03-18T22:49:04.457000+00:00] dovos#0: server side physics are pretty much unsolved besides the most basic checks you can write yourself
[2025-03-18T22:48:48.105000+00:00] mynameischippy#0: there are licensing issues w/ using unity's physics in stdb, which is why they don't have that integrated
[2025-03-18T22:45:40.920000+00:00] mynameischippy#0: If you wanted to get freaky with physics, you're going to need to either import a library (as seen here https://discord.com/channels/1037340874172014652/1150542804347535460/1349597467964080138), or DIY it with a lot of blood sweat and tears
[2025-03-18T21:44:47.790000+00:00] dovos#0: it's probably just 60 because it's the physics update rate
[2025-03-18T19:30:50.672000+00:00] theblindgoat#0: Thanks! I get how you'd do it with RLS, as that's the only way it made sense in my head.  But to clarify how you're currently doing it:  1. a single server Module codebase 2. separate database per streamer (e.g. spacetime publish streamer_name) but all on a single physical server  I might be using the wrong terms here for module/database/server.
[2025-03-18T18:59:54.221000+00:00] dovos#0: you could keep track of when the last reducer call of a user was. and ban them if it is faster than your client would do it. it is a feature request to have different priorities for reducers to have better physics certainty
[2025-03-17T17:25:37.414000+00:00] bigmistake#0: (still wrapping my head around the whole setup though, I made a weird face finding out you'd need to do for example serverside validation of physics)
[2025-03-17T15:18:26.360000+00:00] dovos#0: server side physics engines are currently a unsolved problem but the team has it as feature request
[2025-03-17T15:15:21.325000+00:00] tobiesroei#0: could anyone recommend a good physics engine to couple with spacetimedb c#?
[2025-03-15T12:10:54.282000+00:00] dovos#0: that said it is relatively easy to make your own primitive physics if you only support circles and unrotated rectangles as collisionshapes
[2025-03-15T12:09:21.175000+00:00] dovos#0: wasm is the main thing that holds stuff back. for physics they are looking into it for the future. right now their entire focus is on bringing rls out
[2025-03-15T11:58:56.190000+00:00] mupu0#0: From what I understand all rusicers get parralalized, is there any restrictions currently what a reducer can do? Like can I run any code including web requests, threading, syscalls, etc? I recon it's limited because it's running inside wasm?   Also on that note how will physics work in the future? Will there be some kind of direct support be built in - or just a lib? <@342842214940016641>
[2025-03-15T00:06:23.899000+00:00] daxode#0: It looks like normal physics as I'm overriding the build-in RigidBody and Colliders but I swear it is actually Rapier running there üòÜ
[2025-03-15T00:05:04.917000+00:00] daxode#0: On another note entirely I got a section of rapier working on the Unity client (as a package, no source changes required). So I can now run the same physics engine on the server and client üòÖ  (next up client/server prediction - probably)
[2025-03-14T21:04:37.086000+00:00] naloween#0: With the physic process I update every 0.0166 s
[2025-03-14T21:03:24.718000+00:00] naloween#0: You have to update the tick from the godot physic process indeed
[2025-03-14T21:00:34.361000+00:00] dovos#0: physics process.
[2025-03-14T20:59:19.919000+00:00] mynameischippy#0: or maybe the physics process one
[2025-03-14T20:39:56.394000+00:00] .catfood#0: i'm calculating physics on client side, and just using a character controller
[2025-03-14T20:10:37.909000+00:00] daxode#0: Which approach did you take for physics? üòÖ
[2025-03-14T16:42:48.887000+00:00] 3blave#0: Archetypes are only relevant for the physical storage of the data, not the logical representation
[2025-03-14T15:01:27.837000+00:00] dovos#0: actual physics is currently an unsolved problem. tho bullet hitbox scans aren't too hard to do by hand. especially if the hitbox is a circle
[2025-03-14T14:58:05.493000+00:00] dovos#0: well does your auto battler need physics collision?
[2025-03-14T13:48:33.585000+00:00] dovos#0: you design your data around that. tho i admit that you need to write a server side version of it including the physics as it is currently cursed to get a physics engine to run on the server so easy physics are fine or just general speed and acceleration checks on the velocity and rotation speeds. cheating in itself is a unsolvable problem tho even with stdb
[2025-03-14T09:08:06.939000+00:00] flori6#0: It's not physics heavy at all but I just need a way to simulate the game server side for validation
[2025-03-14T09:00:32.847000+00:00] pogfather#0: I apologize if I am asking some dumb question  I'm a bit of a novice when it comes to network programming but I wanted to ask if I want to make a game or application with unity3D where I can make multiple game sessions/matches, so not quite MMORPG, but more like smaller Fornite or call of duty warzone, but not much physics simulation.  Starting simply, I can just have one published module on a stdb instance hosted on maincloud.   To scale (if I am not wrong more than 1000 players) I am guessing somehow another instance (module or stdb not sure) have to be spun up? does maincloud do the scaling for me? or is the strategy self host on aws or something and be like "oh this instance is getting full to the specified limit, so an orchestrator and spacetimedb CLI to spin up another instance (module or stdb not sure) for me somehow?"  or something like that.
[2025-03-14T08:50:44.390000+00:00] tamaro.skaljic#0: Yeah, one problem right now is that there isn't a official physics engine integration for SpacetimeDB, so calculating physics heavy games will be a problem.
[2025-03-14T01:51:52.840000+00:00] ullanar#0: o/  Want to ask about general approach to server side 3d physics  Probably many of engineers knows about Rapier physics engine - is it running ok with spacetimedb or better take something else? And about terrain - maybe some advices from experienced developers? I basically need to make a good pipeline which includes spacetime with some physics engine, bevy game engine and probably blender as a general purpose 3d software. And I just cannot yet understand how to combine all of it together. Height maps?
[2025-03-13T16:42:31.444000+00:00] mynameischippy#0: Very awesome to see a physics library working on the server side!
[2025-03-13T15:18:54.112000+00:00] dovos#0: currently the hardest thing is server side physics checks
[2025-03-13T09:29:59.883000+00:00] dovos#0: How do you save the physics system on the server side?
[2025-03-12T16:28:46.791000+00:00] ntrnial#0: I came to this thread just to search for this specific feature. I am working on a flight combat game and I need client-side prediction as well as lag compensation (extrapolating enemy‚Äôs position by their velocity and ping).   Having the same code for aircraft physics on both client and server is going to be a killer feature for me to switch to STDB. Right now my flight code is written in C++ for UE5.
[2025-03-12T02:32:17.239000+00:00] tamaro.skaljic#0: Here are two messages regarding unity physics licensing issues
[2025-03-12T02:29:10.629000+00:00] daxode#0: In either case, I'm actually currently seeing what the physics situation is like, and then also trying to see if I can make it work with our entities package so you don't need GameObjects, and can just use Entities Graphics directly for rendering which would be really cool
[2025-03-12T02:26:11+00:00] daxode#0: Yeah I'm actually looking at physics right now too, since I wanted to try having the server simulate xD  What I could probably do is yoink the com.unity.physics implementation and reimplement it as just pure C# and then run the C# server.. but that sounds awfully slow.. ideally I can yoink an existing native implementation like Jolt, or Bullet, or even just PhysX
[2025-03-12T02:22:11.016000+00:00] tamaro.skaljic#0: If you search in this Discord for "Unity" you can see what other people think about SpacetimeDB in this context. üòÑ Unity Physics and the license problem was mentioned a few times because SpacetimeDB has no physics engine integration at the moment.
[2025-03-11T23:56:43.541000+00:00] dovos#0: as a warning. it is the c# version of the physics engine
[2025-03-11T20:40:56.250000+00:00] dovos#0: ok i'm officially too dumb/nooby to compile the jolt physics into the server
[2025-03-11T05:17:03.702000+00:00] boppygames#0: yeah, there would probably be some sort of physics loop reducer which runs every so often (probably 30 times a second) and when that reducer detects a collision it should probably just remove the projectile and immediately deal the damage, sort of similar to what we do in blackholio
[2025-03-10T21:46:53.613000+00:00] mynameischippy#0: process things asap rather than on a tick, since there really isnt a ton of physics involved
[2025-03-10T21:42:15.358000+00:00] dovos#0: did they really do 60hz? i thought it was slower as it doesn't really have physics to keep track of on the server side
[2025-03-10T11:15:37.267000+00:00] remblej#0: Wrt physics engine, it would be awesome to have plug and play opensource engine available within spacetime. Jolt seem to be quite popular (recently becoming available in vanilla godot), and already has ongoing project with rust bindings.  https://github.com/jrouwe/JoltPhysics  https://github.com/SecondHalfGames/jolt-rust But I can only assume, there would still be tons of work to make it work and work well in spacetime.
[2025-03-10T01:10:03.768000+00:00] elliotcs#0: could i possibly go the other direction? take Godot‚Äôs physics engine and import it into the server as well
[2025-03-10T01:06:18.809000+00:00] barronkane#0: If the physics engine is its own library, you just send physics objects to two locations. Local and spacetime.
[2025-03-10T01:05:29.876000+00:00] barronkane#0: In that case you'd just run the physics engine on both client and server, and do a comparison every few frames. Out of sync = you use server values and update every frame until nominal. Something to that effect.
[2025-03-10T01:04:51.377000+00:00] elliotcs#0: I‚Äôm just worried it‚Äôd be redundant to write the physics in Spacetime and on the client separately
[2025-03-10T01:04:15.382000+00:00] elliotcs#0: in Rocket League, the client and server both calculate the physics. on low latency they are both usually correct, but when the client gets one answer and the server gets another, that‚Äôs the only time it mutates to the server‚Äôs physics. i am planning to create an ultra real time competitive game with similar requirements of Rocket League for networking.
[2025-03-10T01:02:28.298000+00:00] 3blave#0: In BitCraft we don't do a whole lot of physics, and what we do do is pretty simple
[2025-03-10T01:02:05.476000+00:00] elliotcs#0: i‚Äôd assume the client would be late to all physics calls
[2025-03-10T01:00:32.490000+00:00] barronkane#0: If I was architecting the engine, physics objects would be handled by spacetime and then send mutations to the client for actually managing the objects.
[2025-03-10T00:58:48.357000+00:00] barronkane#0: You can certainly have a mesh count as a physics object, but that can get computationally expensive depending on the number of vertices. Either/or really depending on what you want to do
[2025-03-10T00:58:10.730000+00:00] barronkane#0: Physics objects usually don't equal mesh objects. You'll usually have a separate collision shape. The classic example is a cylindar or pill that covers the area of a player, and the physics engine just uses the simple pill shape to calculate physics.  The physics engine just has to be aware of all the physics objects
[2025-03-10T00:56:46.539000+00:00] elliotcs#0: this may be a dumb question, but the entire map and objects would be designed in the game engine. in order for physics prediction, wouldn‚Äôt the client and server both have to have the same perception of the map and use the same physics engine?
[2025-03-10T00:54:14.289000+00:00] barronkane#0: You could honestly probably grab a good physics engine and write your own accessors
[2025-03-10T00:53:14.250000+00:00] barronkane#0: Well it's not much different than a normal physics engine other than the way you pass data.
[2025-03-10T00:52:27.637000+00:00] elliotcs#0: the only thing stopping me from continuing work on my game is the daunting idea of having to write physics checks in a gameserver separate from the game engine. this seems odd to me.
[2025-03-09T23:07:48.341000+00:00] 3blave#0: Another physics engine could in principle work, but it has to work in Wasm
[2025-03-09T23:07:36.842000+00:00] 3blave#0: Unity Physics is tough because of their license
[2025-03-09T23:07:07.650000+00:00] wildcard604#0: ya i saw the server can be written in c#, and i think i saw some autogenerated usage in the docs.  I have definitely been curious about how prediction would be handled, and that makes some sense for sure.  I'm curious though, if you wanted to use say Unity Physics, or another physics engine like Havok, how you might go about that with the server being authoritative.
[2025-03-09T20:49:17.160000+00:00] dovos#0: for example you can't use the unity physics engine as their license doesn't allow it* (not sure if you do it yourself)
[2025-03-09T20:48:51.684000+00:00] dovos#0: you need to make sure that the license of the physics engine allows you to do it
[2025-03-09T20:46:59.143000+00:00] goten265#0: indeed no textures and stuff but you have to setup your own physics engine
[2025-03-09T19:41:41.612000+00:00] 3blave#0: To answer your questions:  1. It absolutely is intending to be a possible solution for low-to-mid level devs. The dream is that the MMO genre is now open to indie devs.  2. There are not really amazing solutions yet for what you mentioned above. You've identified the weakest spot for SpacetimeDB. It's not even necessarily a technical issue as much as it is a licensing issue in some cases. For example, Unity has strict licensing rules about where you can use their library code. SpatialOS ran into this problem as well.  a. If you're going to do physics, you'll have to use an open source math/physics library of some kind. b. This question I'm not so sure about what you're asking, but I think you're asking "how can I write code which is shared by the server and the client"?
[2025-03-09T01:06:01.699000+00:00] dovos#0: but idk. haven't tried it yet. i plan to add a c# physics engine to the server after i get the basic setup working
[2025-03-08T16:36:45.255000+00:00] skius#0: good point, just tried: removed subscriptions from the player client, but performance hit still happens (only subscription now is a table where I insert physics tick frametimes, so at most 60 per second)
[2025-03-08T12:28:19.607000+00:00] dovos#0: The problem with putting a physics engine in the server layer is a license issue. For example unity doesn't really allow it. That said you can add a physics engine like jolt or rapier to the server layer if you want to write the connection/api layer yourself. I haven't gone that far yet so I don't exactly know how feasible it is. To spacetimedb in general. There are still some very important features missing that should come out in the next few months like the row specific permissions.
[2025-03-08T09:26:27.989000+00:00] roomyrooms#0: if the answer is that the intention's to support these higher scale games with priority that either prefer simplistic physics or gain vast benefits from every drop of performance, I totally understand! I'd love to use it either way, just wondering about my current project
[2025-03-08T09:24:41.358000+00:00] roomyrooms#0: heya, I just saw the video and everything looks fantastic- really, even the website is pretty slick. I love what you guys are doing! I had a couple questions just because I'm curious if I should look into using this more or save it for a future project.  I'm working on a multiplayer game with the intention of scaling it to, say, ~300-500 players. I realize it's always good to anticipate thousands, but right now, that's what my server setup can handle without that much of a hiccup, so I'm not too worried. it's far more likely that I undershoot than overshoot anyway! but this is my thought and I guess concern:  atm, the main problem for me (and I think most other mid-level developers making something higher-scale than a couch coop game, but lower scale than a true mmo) isn't docker / web server setup time, but actually syncing physics, scene loading, etc. to the server. I realize this isn't an impossible task with spacetimeDB, but in the graphic it's portrayed that mirror, photon, etc. are an incomplete solution.  I think it's fair to say that the time it takes to replicate Unity physics on a server for a solo dev or even small team is relatively substantial- not to mention that mirror and netcode, for example, make it pretty straightforward to write code for both the client and the server at once. is it as performant as it could be? definitely not, but the actual creation time of the game is dramatically lower than it would be otherwise  I haven't done enough research to know the answers for myself (I apologize for that, I'll read up more in the next few days) but I can boil down my thoughts to two questions: 1. Is spacetimeDB also intending to be a possible solution for low-to-mid level devs (<thousands of CCU), or is that out of scope? (totally get it if so) 2. Are there existing solutions to what I mentioned above (or are they in the scope of the project)? Primarily, at least for me:   a. Server-authoritative Unity physics syncing   b. Straightforward (mirror/netcode-esque) coding of server -> client and client -> server communication  the biggest thing for me rn is that it'd already take a ton of time to rewrite things to use spacetimeDB, so I'd mainly be interested if I knew I didn't have those additional month(s) long projects ahead of me as well
[2025-03-07T21:53:24.837000+00:00] inspectorcaracal#0: jolt physics are pretty good too
[2025-03-07T21:52:46.637000+00:00] dovos#0: https://github.com/amerkoleci/JoltPhysicsSharp https://github.com/SecondHalfGames/jolt-rust but there is also c# and rust. so yeah it would be possible to use jolt physics for stdb
[2025-03-07T21:45:39.352000+00:00] 3blave#0: Ah that's unfortunate, is the physics engine separable?
[2025-03-07T21:36:50.253000+00:00] inspectorcaracal#0: I've settled on running headless godot as special clients for my physics after realizing it's the easiest way to handle mobs/NPCs as well, but we'll see if I regret the choice down the line I guess >.>
[2025-03-07T21:10:41.211000+00:00] mynameischippy#0: I have no idea how that'd work üòÇ since the server is sandboxed in wasm, are you trying to have it interface with godot so it can leverage godot for physics?
[2025-03-07T18:59:16.539000+00:00] dovos#0: when we could directly run part of godot in the server it would be much easier as it could run parallel to it and handle the inputs and physics world easier
[2025-03-07T18:58:12.358000+00:00] securebread#0: so all physics engine stuff is up to the us and to implement it how we choose
[2025-03-07T18:57:28.438000+00:00] dovos#0: right now the short answer is that because of licensing issues they can't just add physics engines to the server side. tho they said that they will look into why i couldn't run the server sdk in a godot project.
[2025-03-07T18:52:49.379000+00:00] mynameischippy#0: It's totally fair to want to run all the physics server-side, so spitting back position/rotation to clients is absolutely something you can do. Generally for me at least, I think of clients machines as free compute power- and at least in games/mmo's, if I can do the simple authoritative calcs on the server, but then have the players machine handle the complex physics that are an outcome of my authoritative checks, thats a win. I pay less of a server bill, and players get to utilize their nvidia 4070's <:KEKW:831603531629985812>
[2025-03-07T18:47:42.956000+00:00] securebread#0: almost all of the physics will be server side as the physics engine i am currently using (bepuv2) is very ram intensive (although even on my 16gb of ram in my laptop i can still get araund 6000 cubes to generate and have physics interactions before it starts lagging(https://www.reddit.com/r/godot/comments/1725cyf/11000_physics_bodies_in_godot_with_bepuphysics_lib/) here is an example) so having those kinds of calculations running on clients could be taxing as well as having movement checks and the like needing to be run server side, although i could just send a temporary state to both the main client and others then do checks server side and fix everything after a tick or two
[2025-03-07T18:44:19.871000+00:00] mynameischippy#0: This lets the clients physics engine handle all of those things involved with movement, (hair physics, clothing, capes, etc), whereas if you just set the position, the physics on those things may not work properly.
[2025-03-07T18:43:34.534000+00:00] mynameischippy#0: Oh for things like VR? Definitely a bit more complex- but still doable with inputs. You should also send the inputs of other characters back to each client, rather than position data, and then have each client's physics determine the movement of those characters from their input data. (rather than just setting their position)
[2025-03-07T17:36:54.366000+00:00] securebread#0: would you be able to ask about the physics stuff for me? i am curently at university and have no audio to listen to the responses.
[2025-03-07T17:21:30.765000+00:00] dovos#0: the good thing is that the server only needs to run the physics world and not generate any frame or mesh stuff (besides proc gen)
[2025-03-07T17:14:21.262000+00:00] dovos#0: tho that is a general problem of keeping physics in sync in multiplayer games
[2025-03-07T17:10:38.548000+00:00] dovos#0: I'm still unsure on how to run a physics engine on the server side tho
[2025-03-07T17:04:57.351000+00:00] securebread#0: well it‚Äôs a vr game implementing the bepuv2 physics engine
[2025-03-07T17:02:19.113000+00:00] dovos#0: it depends on how physics heavy you game is. how responsive and accurate does it need to be.
[2025-03-07T17:00:38.993000+00:00] securebread#0: i was just wondering about physics sync
[2025-03-07T15:44:32.983000+00:00] securebread#0: i had just watched the keynote and i was wondering what they meant when they said physics and player updates, do we as devs have to pass in physics updates or does it come with its own physics engine? (regarding spacetimeDB)
[2025-03-07T05:02:22.962000+00:00] mynameischippy#0: Here's an example for your #1: <https://github.com/clockworklabs/Blackholio/blob/8d668332884b366587d4e63606dfa4f4a9899f33/server-rust/src/lib.rs#L309> the `move_all_players` reducer is scheduled to repeat and performs all the physics & movements based off player input.
[2025-03-06T23:12:04.915000+00:00] tqpgun#0: What are the optimal/recommended server specs for self hosting a single node? Disk and memory size wise. Block storage vs physically attached disk? Etc
[2025-03-06T04:04:35.142000+00:00] 3blave#0: I think the place where SpacetimeDB is weakest now for games is heavy physics based games because we don't provide our own physics library
[2025-03-05T23:42:01.950000+00:00] seth_man#0: I won't be there physically but will definitely give it a watch when available.  I'm also happy to pay money in exchange for some brief overviews if you have some way of doing 'consulting' - I assume its probs not worth your time, but figured it's worth an ask anyway
[2025-03-05T01:57:15.550000+00:00] mynameischippy#0: You'd pretty much need a way to store your "map" and the platform collisions. Could make a simple grid system, where certain cells are solid, others are not. Then based on the input, you calculate the physics based on where the player is and if they're gonna land on a solid cell, or fall through it and keep moving.
[2025-03-05T01:55:12.308000+00:00] mynameischippy#0: That'd be how you'd do it pretty much with any server solution- unless you're gonna run a headless unity as the server (idk if godot can do that), which will simulate the physics, which is a lot of overhead.
[2025-03-04T22:55:29.418000+00:00] 3blave#0: You can of course physically do it, but the behavior is UB (undefined behavior)
[2025-03-04T21:42:04.216000+00:00] inspectorcaracal#0: the thought of rewriting all the platform collision physics is very daunting üò¶
[2025-03-04T21:27:51.172000+00:00] mynameischippy#0: See `UpdatePlayerInput` reducer, and then the "physics" scheduled reducer, `MoveAllPlayers`.
[2025-03-04T21:27:28.886000+00:00] mynameischippy#0: You'd send player inputs to the server, (left, right, jump, etc) and have the server perform the physics on the player. Quite similar to how it's done here: <https://github.com/clockworklabs/Blackholio/blob/master/server-csharp/Lib.cs>
[2025-03-04T16:32:00.700000+00:00] volundmush#0: sort of? MUDs/MUSHes/etc are like... 98% of the work is done in the server. there's not typically any complex physics going on?
[2025-02-11T17:23:16.788000+00:00] 3blave#0: This is a complicated question to answer. The TL;DR is it certainly could, but it's not something where we've already explored and fixed all the issues yet (e.g. you'd need to build/use a physics library)
[2025-01-21T00:40:44.457000+00:00] 3blave#0: Hi Kira! The trouble I have answering this is that almost every question you asked could be answered in either direction depending on the game that you're building and also measuring the performance and seeing what is better.  Is it better to send total or partial state to the client? - Depends, how big is the data?  Do you need to implement PhysX on the client? - Unclear, what physics are you simulating. Might make sense to do some on the frontend and some on the backend.  Should you send inputs to the server and compute raycasting on the server or send the result of raycasts to the server? - Typically no, but depends on the game. Presumably you trust clients to do a raycast properly, and if so it makes more sense to run it on the client (you have one server and N clients, and you don't pay for the clients, you pay for the server). In general, you may want to push as much to the clients as you can get away with, since you don't pay for that hardware.  A web game sounds like a great idea to be honest! A 4X game is also a good fit for SpacetimeDB. Although I don't know many 4X games with physics sim.  144 FPS is easily achievable if you don't have much to render or compute!
[2025-01-20T23:13:57+00:00] hg_shgyt#0: Hey everyone!  I‚Äôm trying to wrap my head around optimizing game development with spacetimedb, specifically regarding the balance between frontend and backend responsibilities. Here‚Äôs what I‚Äôm thinking:  If most of my game logic and world generation are handled on the backend with spacetimedb, does that mean the client-side/frontend will primarily focus on UI and GPU rendering tasks?  For example:  World State:  If the backend generates and manages the world state, should I avoid sending the entire world to the frontend? Instead of adding that load to the CPU, would it make sense to just push the necessary data directly to the GPU for rendering? Physics and Interactions:  If most logic is server-side, do I need to implement something like PhysX on the frontend? Could I instead translate inputs (like mouse position and camera data) into actions like raycasting on the server side and let the server handle those calculations? I‚Äôm brainstorming how to design a game that‚Äôs as optimized as possible for the web. I want to offload as much as I can to the backend while keeping the frontend lightweight.  I‚Äôve been thinking about this for a while (especially for something like a 4X game I wanted to build but didn‚Äôt have time to fully implement). Now that I‚Äôm starting, I‚Äôd really appreciate insights into how things should ideally work in this kind of setup.
[2024-11-26T16:10:19.335000+00:00] 0xviva#0: I‚Äôll see later if I can move all the game logic over at a later stage. But not sure how I‚Äôd currently do it with my current physics.
[2024-11-22T00:30:35.447000+00:00] hg_shgyt#0: **Building a 4X Game Entirely on SpaceTimeDB: Architecture Questions**  **Project Overview** I'm planning to build a 4X game where SpaceTimeDB handles all core game logic and state, with the web frontend acting purely as a visualization layer.  ** SpaceTimeDB Implementation Goals** Planning to offload to SpaceTimeDB: - Full game state management - World generation & updates - All game logic (combat, resources, AI) - Turn processing - Physics calculations (if needed)  ** Frontend Role** Web client would be minimal: - 3D visualization using WebGPU - UI rendering with Svelte - User input handling - State visualization - Animations  **Key Questions** 1. What are the limitations/caveats of running full game logic in SpaceTimeDB? 2. Are there specific game mechanics that should NOT be handled by SpaceTimeDB? 3. Best practices for real-time state synchronization between SpaceTimeDB and web client? 4. Performance considerations for complex game state updates? 5. Recommendations for handling large-scale world state?  Looking for guidance on building a game where SpaceTimeDB acts as the complete game engine ( as if its Headless ), with web frontend serving purely as a visualization layer.
[2024-08-16T13:04:14.226000+00:00] annoyedalchemist#0: There's no tick-based n-times-per-second sync. Clients which are subscribed to queries receive updates to those queries as soon as the data changes and only when the data changes. The basic model is that you register some SQL queries, which we call your subscription, and the server sends you a message any time a row which matches your queries is inserted, deleted or updated.  Local prediction is something we don't handle for you (at least currently and in the near future). You basically handle it the way you would without SpacetimeDB: when the player takes an outcome, the client displays what it believes the outcome of that action will be before the server/module confirms it. Then if the server/module says something different happened, change what you're displaying to show the actual outcome.  SpacetimeDB is definitely intended to support fast-paced action games. Our performance isn't everything we want it to be right now, but it's at least ok, and we have plans to make it much better. In my mind the main thing that would get in the way of writing a fast-paced action game with SpacetimeDB is that we don't have good support for physics or vector math on the server. This is not a technical limitation, but a legal one - the ideal thing would be to give modules access to the Unity physics engine so they can do exactly the same math on the client and in the module, but Unity's license makes that challenging.
[2024-08-10T00:35:17.225000+00:00] auralytical#0: scheduled tables have felt so much cleaner to use so far compared to the old schedule macros  ... and saved me from having to debug how my physics reducer kept getting double scheduled <:doggolul:1053506887464788048>
[2024-07-15T02:34:19.995000+00:00] tapghoul#0: I don't think spacetimedb will work specifically for that physics idea (given they're solving different problems), but for large-scale twitch stuff I think it'd be neat to try out as a potential backend in a box - usually I'm writing this stuff from scratch with an embedded k/v store for persistence.
[2024-07-15T02:28:40.439000+00:00] tapghoul#0: Yeah, the idea is pure state transformations that can be replayed. The entire world is able to be rolled back and have partially resolved physics interactions cached between datacenters to avoid needing to recalculate where that optimization can be made.
[2024-07-15T02:13:17.916000+00:00] tapghoul#0: Physics here is just an example, but it's a valid one - I mean any kind of heavy compute.
[2024-07-15T02:12:58.512000+00:00] tapghoul#0: Given this, is there an expected way you should integrate things such as, say, rapier, for tick-based global physics, and other heavy ops? If I can do things concurrently, even if I have to do it myself, that gives a nice amount of flexibility - but it can mess with function purity.
[2024-05-05T14:10:47.740000+00:00] rahulahire#0: Hi there, I'm Rahul Ahire from Pune, India. I run my startup Experientia where we cover various topics in Physics, Computer Science, etc. For my upcoming documentary on Distributed System and its evolution. I'm looking to see if SpacetimeDB is open for sponsorship. Do you know whom should I contact regarding marketing and tell more about it in detail?
[2024-04-12T15:33:01.492000+00:00] chilversc#0: Another similar concept would be taking from scientific work such as protein folding, where you give the same physics task to multiple clients (at random), including some clients not in the area, and have them all calculate the result.
[2024-04-12T15:31:53.199000+00:00] chilversc#0: I wonder if having some sort of limited trust, and a consensus model would work? So the server only has to perform a basic physics check to see if what the client claims is plausible, and within some bounds. It could also check the results from multiple clients to see if they all agree within some tolerance. In a way this would be similar in concept to hashing or crypto where you want some method of verification that is cheap compared to the actual computation. That way the computation can be offloaded to the clients.
[2024-04-11T23:02:34.795000+00:00] 3blave#0: The size of the calculations is not really the problem. Our BitCraft module has hundreds of players moving around and millions of entities. What Phoebe is saying is only partially complete. The real reason we cannot run Unity physics on the server is a legal one, not necessarily a technical one. Their license does not allow for it.  You can certainly do physics calculations within SpacetimeDB.
[2024-04-11T15:20:13.219000+00:00] annoyedalchemist#0: BitCraft is definitely real-time, and its module does a fair amount of complex calculation, it's just that it doesn't need a physics engine that's consistent between server and client.
[2024-04-11T14:37:42.782000+00:00] annoyedalchemist#0: The problem right now is that you can't run Unity's physics engine in a SpacetimeDB module. I think some people have experimented with [Rapier](https://rapier.rs/) in Rust modules, but I don't know the status there. Another ~~dirty hack~~ possibility that's been explored is having a trusted client which runs Unity or whatever, listens for changes in the game state, and makes calls to special reducers with a verified physics simulation. This is unfortunate from a latency perspective, but may be the best you can do right now if you need to precisely replicate the engine your clients are running.  From a theoretical perspective, WASM has near-native performance (big asterisk here for the current toolchain used by C# modules, but that'll be changing as NativeAOT becomes more stable), so you should be able to pull off roughly the same level of computation as a traditional game server. It gets a little more complex because most physics engines want you to build a big mutable state and step it, whereas SpacetimeDB wants each reducer to do a fresh read from the DB for its inputs and write its outputs back into the DB; the two models are at odds.  So in short, the state of things right now is not great. We know that server-side physics is a blocker for a large class of games, and it's definitely something we'd like to address, but I can't promise it'll happen any time soon -- we've got a long list of high-priority enhancements, and a lot of existing plates to keep spinning.
[2024-04-06T23:26:35.179000+00:00] novruz_97#0: What i meant is, is it one physical server?  If it's like that, then i understand the lag and all. I asked cuz i remember you said it will run on many physical servers. I guess you are testing the ability of STDB to run the test on one server for now.
[2024-03-22T18:24:58.256000+00:00] mynameischippy#0: Ah right- so later down the line when they launch their cloud service, the goal will to have something similar. Databases spread out across the physical world so that your clients can connect to the nearest database to fetch their updates.
[2024-02-20T03:08:34.519000+00:00] thehalu#0: yea, there are multiple, some for funding the platform, other for funding the contributors, and some edge cases. what makes sense on a per project basis really depends on what the end result is - creating intellectual property, a physical product, solving a bounty, etc.
[2024-02-16T08:17:25.065000+00:00] thehalu#0: vector embeddings i suppose, which are maybe spacial but potentially higher dimension than most physics based things (i think?). perhaps the key differentiation is more so that they specialize in querying by nearest neighbor(s) around some given point(s).  i guess this could already be done by brute force in stdb, but I'm not really sure what optimizations vector dbs make to be efficient at it. i think i recall you wanted to add optimizations for spacial indexing, is that specific to 3D or generalized to N-dimensions?  this is way outside my wheel house, hopefully i'm not too far off base üòÖ
[2024-02-13T21:14:55.741000+00:00] mynameischippy#0: Obviously, the latter is definitely going to be more inefficient, but likely less work if your physics are super complex.
[2024-02-13T21:14:28.073000+00:00] mynameischippy#0: There are currently two ways to do it (that I know of ü§≠): (1) Run the physics in the module on the server (2) Run a special headless client that acts as your physics engine, connect to the module and use that as your "authority"
[2024-02-13T21:09:21.904000+00:00] thelogicalerror#0: right, but you cannot trust the client because of cheaters, so what if you want to run the physics server side to ensure that there is a single source of truth? do you mean you run the physics in a WebAssembly module on the server?
[2024-02-12T21:45:29.009000+00:00] 3blave#0: With respect to physics and deterministic simulation, that's part of the reason we use WebAssembly
[2024-02-12T08:24:16.677000+00:00] thelogicalerror#0: I discovered spacetimedb when this youtube popped up in my youtube stream: https://www.youtube.com/watch?si=JzMyGhRkYpEyNWgB&v=roEsJcQYjd8&feature=youtu.be  It sounds really useful and definitely in line with my thinking about entity component systems One thing that wasn't adressed in the video is  .. how would you handle things like physics?  since you want the server to be authoritative & having physics work exactly the same on many different machines with different cpu architecture is *quite* the challenge & you really don't want there to be any drifting between the clients due to compounded floating point errors... So you really would want there to be a server (or a special client?) that calculates the physics How would you handle something like this in spacetimedb? (I mean, using an existing physics engine)
[2024-01-15T06:50:19.884000+00:00] tim6091#0: I'm not thinking like a real-time action MMO with physics and poetry...
[2024-01-01T21:56:24.823000+00:00] hudson_bruno#0: So I tried a lot to integrate with a physics engine called Rapier but it just deemed currently impossible, I can't save a variable globaly on the system, tried to use some unsafe code but it got cleaned up when a new connection was initiated, then I tried to run the physics engine on another thread but it is currently not supported even tho it seems that wasmtime suport multithread, can anyone shed some light on me to say if it is currently possible or not?
[2024-01-01T02:46:12.045000+00:00] hudson_bruno#0: Yeah thanks for pointing it out! I just noticed another thing too on both methods (repeat vs manual recurring schedule), Im tring to run a physics simulation on every 1s (just to test) and currently my function is super simple in a way that it runs faster than those 1s, I expected it tun run on every 1s (ignoring floating point), but instead it accumulates a lag that is proportional to the function execution time in a way that when it reaches the '7 second' it accumulated 100ms of delay
[2023-12-30T19:17:24.588000+00:00] hudson_bruno#0: I see, will try to search and integrate with some physics engine, thanks for the help!
[2023-12-30T18:28:32.721000+00:00] mynameischippy#0: Currently, you have to run your own physics simulation. It was a feature they were thinking about but I don't think its high on the priority list.
[2023-12-30T16:55:55.592000+00:00] hudson_bruno#0: Hi, just wanted to say that the project is very interesting but one question comes up on how to validate player movement, other libs usually handle physics on the server by a runtime like godot or unity that is the same for client and the server, but how can I achieve this kind of validation using this lib? is it possible to run a godot/unity server inside? Or do I need to build a custom physics to work on serverside?
[2023-12-29T11:08:49.850000+00:00] ploddr#0: Did ever consider using some kind of "coroutines" instead of scheduling for "time spread" tasks? I asked on topic of deterministic simulations in <#1138987509834059867> . Basically scheduling works fine for simulations, until you really need to run a lot them or alter time speed. I will explain how it is all related.  Lets say all your gameplay code is deterministic, so you can record player input and gameplay outcomes and then use it for "integration testing" to make sure that your gameplay module code is still correct during development. Obviously you want your tests to run "as fast as possible". Or for example you just want to run large amount of simulations as fast as possible for your AI engine training. Or for example you are performing some kind of "chaos" / "random" testing: trying to test your game Module on all posible gameplay combinations and catch anomalies as they appear.  To perform those kinds of tasks you should be able to run your Module "as fast as possible".  Current suggestion was: define some notion of fixed "framerate", shedule periodic reducers at this framerate and then use time scale variable to alter the simulation speed. But this solution has limitations. For example speeding time "run as fast as possible" will result in increased simulated time per frame, which could simply break simulation rules (physics, AI).  So ideally if you want to run your simulation "as fast as possible" you should run it in a loop without any delays. But I imagine that this is simply not possible with current DB architecture: such loop will for sure become a deadlock.  Coroutines could be possible solution for this. A game module code could contain "infinite" game loop, but it will yield control back to DB to perform all bookkeeping, scheduling, etc. and only then DB will give control back to Module for a "next tick".  I did not dig deep into this, but with quick search I found somewhat related discussion: https://github.com/WebAssembly/design/issues/1321
[2023-12-13T13:09:59.618000+00:00] ploddr#0: How do you store World Mesh data for BitCraft? I assume it has some kind of physics engine on a backend for players movement validation.
[2023-11-18T21:26:44.555000+00:00] 3blave#0: This is a fair criticism for sure. Predictable performance is >>>>> than high, but unpredictable performance in any real-time application. However, we can allow the user to specify prejoin constraints in their table definitions, so that the user can force the database to make certain guarantees about the physical representation of data
[2023-11-18T21:20:08.797000+00:00] 3blave#0: I'm not sure I follow what you're saying here. Pre-joining will store the data physically joined together just like as in archetypes. AFAICT, that's 100% identical to archetypes.
[2023-09-18T06:37:43.354000+00:00] 3blave#0: We don't do any physics on the server for BitCraft for the same reason
[2023-09-18T06:03:06.517000+00:00] amirosman2095#0: Even though I use headless Unity for physics simulation, physics simulation is not actually a priority, I will gladly remove it for a light weight solution that doesn‚Äôt consume much resources, specifically CPU
[2023-09-17T19:18:29.410000+00:00] 3blave#0: So for licensing reasons we can't really run headless Unity within SpacetimeDB, but you could run it alongside SpacetimeDB for your non-persistent data. Ultimately we want to provide people with a physics library they could use on both the client and server to run it all within SpacetimeDB
[2023-09-17T19:15:45.477000+00:00] 3blave#0: Are you using headless Unity to simulate the physics?
[2023-09-17T19:15:02.455000+00:00] amirosman2095#0: Yes, I do use server side physics
[2023-09-17T19:13:50.853000+00:00] 3blave#0: With respect to question #1, I would ask do you do serverside physics calculations?  WIth respect to question #2, SpacetimeDB currently uses a TCP connection (Websockets) although in the future we plan to support reliable UDP as well.
[2023-09-17T07:53:18.883000+00:00] mynameischippy#0: <@984273622157906010>, sounds like you're using a unity headless build as your server?   SpacetimeDB is very unlike traditional client<->server<->database architectures. Instead clients connect directly to the database for reads, and they call 'reducers' in the database for writes.  The reducers are coded in a module that "lives in the database" and are basically functions you can write to validate client calls. [helpful graphic](https://cdn-images-1.medium.com/max/1024/0*dXtji0HlTN24oliY)  I'm doing a very poor job of explaining it, but that's like the absolute basics. There's a ton of magic that makes it all work, like your server code being converted to WASM so you can basically write it in any language that supports being converted to WASM.   Also it's websockets, so TCP currently. Websockets, once established, have very little TCP latency involved. That said, they mentioned udp later down the line.   Currently, there's not really a good way to utilize spactetimeDB in a headless unity server build, because there is no server code that would run in the build.   All of the code you write would either get loaded to their testnet or you can set up a standalone self hosted instance of spacetimedb.  This means if you need physics on the server, you'll have to implement it yourself instead of relying on the game engine (a headless unity build). You probably could implement a master headless unity server, discussions earlier today were talking about this, but it would likely defeat the main intent behind spacetimeDB.
[2023-09-16T21:59:10.719000+00:00] mynameischippy#0: No good way to use a game engine for physics with StDB yet I think
[2023-09-16T21:58:48.727000+00:00] mynameischippy#0: Yeah if you're going to use a game engine as your server to handle the physics and all that, just homebrew or use any of the other networking solutions already designed for that.
[2023-09-16T10:05:06.755000+00:00] thehalu#0: 2. idk...  > theoretically, an old MC world (pre-world height increase) takes ~100petabyts https://www.youtube.com/watch?v=ZmfopT9Vupo&t=210 > obviously, that is impractically large, no one is gonna explore that. so I guess the next question is what are the biggest servers in practice? > 2B2T is ~10T https://simple.wikipedia.org/wiki/2b2t#:~:text=2b2t%20is%20over-,10%2C300%20gigabytes,-in%20size%20and > however, most of that is still probably useless data (untouched world gen). If we're being memory conscious, it makes more sense to just store the diffs and resolve at runtime during chunk gen. So the trade off becomes Memory vs ( Redundant Gen + Diff Time), which I don't have good numbers for, but could probably work >  > There's also a matter of resolution, rather than asking how big of a world can I generate, one might ask how small can I make my voxels in a fixed area? From a storage perspective it sounds the same, but the rate of traversal is now much different. MC blocks are large and takes a while to explore, With Teardown sized voxels you move faster and edit more leading to more chunk generation or more diffs depending on your approach. https://douglasdwyer.github.io/octo-release/ (online demo of such a game)  3. I guess it depends on probably 3 factors, whether they are true voxels, cost of loading, and use of isomorphic patterns.  > If you are treating them as essentially point clouds and do ray tracing, its probably not necessary. But most games don't go that route, they still use polygons and a handful of algorithms to optimize memory and rendering, use like greedy meshing, occlusion culling, etc. (with isomorphic design the client and server will be doing the same thing). Chunks are usually persisted within a spawn/physics radius around players. In minecraft there is the concept of a chunk loader, which managers to persist chunks without a user and is used for automated farming.
[2023-09-16T07:57:54.268000+00:00] 3blave#0: Curious about how feasible it is to have a server physics based game up on SpacetimeDB
[2023-09-16T07:57:19.282000+00:00] 3blave#0: #1 Is the best argument for this architecture for sure, it's something that's not really possible to integrate into SpacetimeDB because of licensing issues (at least while there's no SpacetimeGameEngine) #2 I would really do the napkin math on this because you'd be surprised at how little data you actually need. All terrain data for BitCraft is in our DB #3 Hmm, interesting. Is this something that Voxel games typically do on the server? #4 Fair, if you have an existing database, although we'd like to make migration easy eventually. #5 True although if we do our jobs well that should not be necessary. We'll do the appropriate fan-in and fan-out for connected clients. #6 Reducers are kind of built for this purpose. Quite easy to do in SpacetimeDB, unless you want to do the physics calcs inside a game engine, and then yes you're right
[2023-09-16T04:33:30.523000+00:00] thehalu#0: Yea I don't think it would be my first choice either, but I thought there may be reasons to justify it for some games: 1. **Reduce Reproduction of Work**: if you are already are doing the physics for the client, may as well take advantage of that (game engines may have better ergonomics for such things out of the box anyway) 2. **Separation of Memory**: If working with a large world like Minecraft, I might not want that to fill up my single machine limit by putting it all in the same db. so I may wish to have a separate Entity DB and World DB (or something) 3. **Persistent Mesh Data (et al.)**: again for something like a large voxel game, where chunk loading can take a while, it may be beneficial to persist mesh data across multiple calculations. same for games that calculate against the same mesh repeatedly 4. **DB Interop:** acts as a compat layer between multiple DBs (if for some reason you have a specialized DB for a particular datatype or purpose) 5. **Horizontal Scaling**: just add more arbiter clients and you still have the guarantees of STDB for MVCC 6. **Dynamic Acceleration & Velocity Validation**:  > say at first you put the max velocity as the *sprint speed*. However, there are effects with *knockback*, so later increase the max-velocity to sprint+(N\*knockbacks). A hacked client may get away with moving at that new max velocity.  > However, with an arbiter client, you don't have to worry about adding (N\*knockbacks) if it has the authority to bypass the max sprint speed. It did physics calculation on whatever effect caused velocity surpass the limit, so it should just work. > (not saying it can't be done with reducers, but this seem easy)
[2023-09-16T03:37:18.310000+00:00] annoyedalchemist#0: This would work, but IMO you'd need a good reason not to just put the physics sim stuff inside the module. What problems would the arbiter clients solve?
[2023-09-16T02:48:16.630000+00:00] thehalu#0: "Arbiter Clients" mostly just doing physics sim etc.
[2023-09-13T19:13:40.081000+00:00] natethedev#0: Seems like a device issue, as this error is physically not possible lol - this would only happen when the .pages variable is undefined therefore .at would not work however the config is hard coded making it easy to rule that one out and declare it a browser issue. It sounds like it‚Äôs having a hard time loading the markdown in your browser
[2023-08-12T18:56:11.800000+00:00] nintron#0: I'd assume there isn't any "main game loop", but rather just state. Clients can make requests to update the state and if physics allows for their request based on the time etc, then it's updated, otherwise the client requested something incorrectly.
[2023-08-12T00:56:20.490000+00:00] novruz_97#0: Oh.. So you have to construct your own physics engine?? For STDB
[2023-08-11T11:36:43.321000+00:00] 3blave#0: You are correct, but typically game engines have a built in physics system, for example Unity‚Äôs. Unity‚Äôs data types don‚Äôt work in SpacetimeDB and it‚Äôs tricky because of licensing reasons.
[2023-08-11T05:30:54.702000+00:00] novruz_97#0: Wait, i thought u just upload your game as a module and voil√†, the physics is written inside the game module, no?
[2023-08-10T16:44:48.262000+00:00] 3blave#0: The other thing is physics sim on the server, you could do it, but we haven‚Äôt built it in yet or anything
[2023-08-09T16:33:05.560000+00:00] nintron#0: <:boohoo:969338937887830056> Can't we just break the laws of physics and transmit stuff faster than light
